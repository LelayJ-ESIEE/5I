 Sudoku : une liste de termes "case(N,L,C,V)" où V est la liste des valeurs
 permises en case (L,C) et N est la longueur de V.
 
 Ecrire un programme sudoku(P,S) qui "retourne" une grille de Sudoku :  
    P est une liste de cases pré-remplies [..., case(1,i,j,[vij]), ...].
    la démonstration du but ``sudoku(P,S)'' lie la variable S à une grille de
    Sudoku. Cette grille est sous forme d'une liste de termes 
    [..., case(1,i,j,[vij]), ...], dans laquelle toute case (i,j) est présente.
    
Remarque : dans le remplissage d'une grille de Sudoku, une excellente stratégie
consiste à s'intéresser d'abord aux cases qui ont le moins de liberté, c'est-à-dire
aux termes case(N,L,C,V) pour lesquelles la valeur N est la plus faible.

Le prédicat prédéfini sort(L,S) vous sera sans doute utile. Exemple :
    
?- sort([case(4,1,7,[1,5,6,8]), case(3,2,4,[1,5,8]), case(2,3,3,[1,5])], S).
S = [case(2, 3, 3, [1, 5]), case(3, 2, 4, [1, 5, 8]), case(4, 1, 7, [1, 5, 6, 8])].

?- 

Pour fixer les idées : mon programme fait une soixantaine de lignes.

-------------------------
Exemples d'exécution du programme sudoku(P,S): 
% -----------------------------------------------------------------------------------------------
/* traces d'exécution
?- consult(sudoku).
% sudoku compiled 0.00 sec, 0 bytes

Yes
?- sudoku([],S), afficherGrille(S).    ------> calcul d'une solution sans case pré-remplie

1 2 3 4 5 6 7 8 9 
4 5 6 7 8 9 1 2 3 
7 8 9 1 2 3 4 5 6 
2 3 1 6 7 4 8 9 5 
8 7 5 9 1 2 3 6 4 
6 9 4 5 3 8 2 1 7 
3 1 7 2 6 5 9 4 8 
5 4 2 8 9 7 6 3 1 
9 6 8 3 4 1 5 7 2 
S = [case(1, 9, 9, [2]), case(1, 9, 8, [7]), case(1, 9, 6, [1]), case(1, 9, 4, [3]), case(1, 9, 3, [8]), case(1, 8, 4, [8]), case(1, 8, 8, [3]), case(1, 8, 6, [...]), case(..., ..., ..., ...)|...] ;

1 2 3 4 5 6 7 8 9 
4 5 6 7 8 9 1 2 3 
7 8 9 1 2 3 4 5 6 
2 3 1 6 7 4 8 9 5 
8 7 5 9 1 2 3 6 4 
6 9 4 5 3 8 2 1 7 
3 1 7 2 6 5 9 4 8 
5 4 8 3 9 1 6 7 2 
9 6 2 8 4 7 5 3 1 
S = [case(1, 9, 9, [1]), case(1, 9, 8, [3]), case(1, 9, 6, [7]), case(1, 9, 4, [8]), case(1, 9, 3, [2]), case(1, 8, 9, [2]), case(1, 8, 6, [1]), case(1, 8, 8, [...]), case(..., ..., ..., ...)|...] ;

1 2 3 4 5 6 7 8 9 
4 5 6 7 8 9 1 2 3 
7 8 9 1 2 3 4 5 6 
2 3 1 6 7 4 8 9 5 
8 7 5 9 1 2 3 6 4 
6 9 4 5 3 8 2 1 7 
3 1 7 2 6 5 9 4 8 
9 6 2 8 4 7 5 3 1 
5 4 8 3 9 1 6 7 2 
S = [case(1, 9, 9, [2]), case(1, 9, 8, [7]), case(1, 9, 6, [1]), case(1, 9, 4, [3]), case(1, 9, 3, [8]), case(1, 8, 4, [8]), case(1, 8, 8, [3]), case(1, 8, 6, [...]), case(..., ..., ..., ...)|...] 

Yes



?- sudoku([case(1,1,1,[1]),case(1,4,1,[2]), case(1,7,1,[3]), case(1,1,4,[4]),case(1,4,4,[5]), case(1,7,4,[6]),case(1,1,7,[7]),case(1,4,7,[8]), case(1,7,7,[9])],S), afficherGrille(S).       ----> calcul d'une solution avec cases pré-remplies. 
                         ----> Une case pré-remplie est un terme case(1,L,C,[V]) : 1 car 1 valeur fixée (la valeur V), L et C numéros de lignes et colonnes.
1 2 3 4 5 6 7 8 9 
9 5 8 3 1 7 6 4 2 
6 4 7 8 2 9 5 1 3 
2 6 1 5 7 3 8 9 4 
7 8 9 1 6 4 2 3 5 
4 3 5 2 9 8 1 6 7 
3 7 4 6 8 2 9 5 1 
8 1 2 9 3 5 4 7 6 
5 9 6 7 4 1 3 2 8 
S = [case(1, 9, 7, [3]), case(1, 9, 5, [4]), case(1, 8, 7, [4]), case(1, 8, 5, [3]), case(1, 9, 8, [2]), case(1, 9, 6, [1]), case(1, 9, 4, [7]), case(1, 9, 2, [...]), case(..., ..., ..., ...)|...] ;

1 2 3 4 5 6 7 8 9 
9 5 8 3 1 7 6 4 2 
6 4 7 8 2 9 5 1 3 
2 6 1 5 7 3 8 9 4 
7 8 9 1 6 4 2 3 5 
4 3 5 2 9 8 1 6 7 
3 7 4 6 8 2 9 5 1 
8 1 2 9 4 5 3 7 6 
5 9 6 7 3 1 4 2 8 
S = [case(1, 9, 7, [4]), case(1, 9, 5, [3]), case(1, 8, 7, [3]), case(1, 8, 5, [4]), case(1, 9, 8, [2]), case(1, 9, 6, [1]), case(1, 9, 4, [7]), case(1, 9, 2, [...]), case(..., ..., ..., ...)|...] ;

1 2 3 4 5 6 7 8 9 
9 5 8 3 1 7 6 4 2 
6 4 7 8 2 9 5 1 3 
2 6 1 5 7 3 8 9 4 
7 8 9 1 6 4 2 3 5 
4 3 5 2 9 8 1 6 7 
3 7 4 6 8 5 9 2 1 
8 9 2 7 3 1 4 5 6 
5 1 6 9 4 2 3 7 8 
S = [case(1, 9, 7, [3]), case(1, 9, 5, [4]), case(1, 8, 7, [4]), case(1, 8, 5, [3]), case(1, 9, 8, [7]), case(1, 9, 6, [2]), case(1, 9, 4, [9]), case(1, 9, 2, [...]), case(..., ..., ..., ...)|...] 

Yes
?- 

*/
 
 